// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// countMatches_cpp
long countMatches_cpp(Rcpp::List inter);
RcppExport SEXP _mapi_countMatches_cpp(SEXP interSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type inter(interSEXP);
    rcpp_result_gen = Rcpp::wrap(countMatches_cpp(inter));
    return rcpp_result_gen;
END_RCPP
}
// getValues_cpp
Rcpp::List getValues_cpp(Rcpp::NumericVector cells, Rcpp::List inter, Rcpp::DoubleVector weights, Rcpp::DoubleVector values);
RcppExport SEXP _mapi_getValues_cpp(SEXP cellsSEXP, SEXP interSEXP, SEXP weightsSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cells(cellsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type inter(interSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(getValues_cpp(cells, inter, weights, values));
    return rcpp_result_gen;
END_RCPP
}
// parseInter_cpp
Rcpp::NumericMatrix parseInter_cpp(Rcpp::NumericVector cells, Rcpp::List inter, Rcpp::DoubleVector weights, Rcpp::DoubleVector values);
RcppExport SEXP _mapi_parseInter_cpp(SEXP cellsSEXP, SEXP interSEXP, SEXP weightsSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cells(cellsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type inter(interSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(parseInter_cpp(cells, inter, weights, values));
    return rcpp_result_gen;
END_RCPP
}
// parseInterPerm_cpp
Rcpp::DoubleVector parseInterPerm_cpp(Rcpp::NumericVector cells, Rcpp::List inter, Rcpp::DoubleVector weights, Rcpp::DoubleVector values);
RcppExport SEXP _mapi_parseInterPerm_cpp(SEXP cellsSEXP, SEXP interSEXP, SEXP weightsSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cells(cellsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type inter(interSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(parseInterPerm_cpp(cells, inter, weights, values));
    return rcpp_result_gen;
END_RCPP
}
// mkP4st_cpp
Rcpp::NumericMatrix mkP4st_cpp(Rcpp::DoubleVector r, Rcpp::IntegerVector N, Rcpp::DoubleVector ecc);
RcppExport SEXP _mapi_mkP4st_cpp(SEXP rSEXP, SEXP NSEXP, SEXP eccSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::DoubleVector >::type ecc(eccSEXP);
    rcpp_result_gen = Rcpp::wrap(mkP4st_cpp(r, N, ecc));
    return rcpp_result_gen;
END_RCPP
}
// trilaterate_cpp
Rcpp::DoubleVector trilaterate_cpp(double p0lon, double p0lat, double p1lon, double p1lat, double gc0, double gc1);
RcppExport SEXP _mapi_trilaterate_cpp(SEXP p0lonSEXP, SEXP p0latSEXP, SEXP p1lonSEXP, SEXP p1latSEXP, SEXP gc0SEXP, SEXP gc1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p0lon(p0lonSEXP);
    Rcpp::traits::input_parameter< double >::type p0lat(p0latSEXP);
    Rcpp::traits::input_parameter< double >::type p1lon(p1lonSEXP);
    Rcpp::traits::input_parameter< double >::type p1lat(p1latSEXP);
    Rcpp::traits::input_parameter< double >::type gc0(gc0SEXP);
    Rcpp::traits::input_parameter< double >::type gc1(gc1SEXP);
    rcpp_result_gen = Rcpp::wrap(trilaterate_cpp(p0lon, p0lat, p1lon, p1lat, gc0, gc1));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mapi_countMatches_cpp", (DL_FUNC) &_mapi_countMatches_cpp, 1},
    {"_mapi_getValues_cpp", (DL_FUNC) &_mapi_getValues_cpp, 4},
    {"_mapi_parseInter_cpp", (DL_FUNC) &_mapi_parseInter_cpp, 4},
    {"_mapi_parseInterPerm_cpp", (DL_FUNC) &_mapi_parseInterPerm_cpp, 4},
    {"_mapi_mkP4st_cpp", (DL_FUNC) &_mapi_mkP4st_cpp, 3},
    {"_mapi_trilaterate_cpp", (DL_FUNC) &_mapi_trilaterate_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_mapi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
